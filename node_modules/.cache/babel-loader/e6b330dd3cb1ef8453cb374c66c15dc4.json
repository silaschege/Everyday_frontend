{"ast":null,"code":"var _jsxFileName = \"/Users/silas/Documents/GitHub/everyday_frontend/src/containers/Signup.js\";\nimport React from 'react';\nimport { Form, Input, Button, Checkbox } from 'antd';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport * as actions from '../store/action/auth';\nimport Icon from '@ant-design/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FormItem = Form.Item;\n\nclass RegistrationForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          this.props.onAuth(values.userName, values.email, values.password, values.confirm);\n          this.props.history.push('/');\n        }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.state.confirmDirty) {// form.validateFields(['confirm'], { force: true });\n      }\n\n      callback();\n    };\n  }\n\n  render() {\n    // const { getFieldDecorator } = this.props.form;\n    return /*#__PURE__*/_jsxDEV(Form, {\n      name: \"basic\",\n      labelCol: {\n        span: 8\n      },\n      wrapperCol: {\n        span: 16\n      },\n      initialValues: {\n        remember: true\n      },\n      children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n        label: \"Username\",\n        name: \"username\",\n        rules: [{\n          required: true,\n          message: 'Please input your username!'\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        label: \"Email\",\n        name: \"eamil\",\n        rules: [{\n          required: true,\n          message: 'Please input your email!'\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        label: \"Password\",\n        name: \"password\",\n        rules: [{\n          required: true,\n          message: 'Please input your password!'\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input.Password, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        label: \"Password2\",\n        name: \"password2\",\n        rules: [{\n          required: true,\n          message: 'Please confirm your password!'\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input.Password, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"remember\",\n        valuePropName: \"checked\",\n        wrapperCol: {\n          offset: 8,\n          span: 16\n        },\n        children: /*#__PURE__*/_jsxDEV(Checkbox, {\n          children: \"Remember me\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        wrapperCol: {\n          offset: 8,\n          span: 16\n        },\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }, this), \"Or\", /*#__PURE__*/_jsxDEV(NavLink, {\n          style: {\n            marginRight: '10px'\n          },\n          to: \"/login/\",\n          children: \" Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n  }\n\n} // // const WrappedRegistrationForm = Form.create()(RegistrationForm);\n// const mapStateToProps = (state) => {\n//     return {\n//         loading: state.loading,\n//         error: state.error\n//     }\n// }\n// const mapDispatchToProps = dispatch => {\n//     return {\n//         onAuth: (username, email, password1, password2) => dispatch(actions.authSignup(username, email, password1, password2)) \n//     }\n// }\n\n\nconst mapStateToProps = state => {\n  var _state$auth;\n\n  return {\n    isAuthenticated: (_state$auth = state.auth) === null || _state$auth === void 0 ? void 0 : _state$auth.isAuthenticated\n  };\n};\n\nexport default connect(mapStateToProps)(RegistrationForm);","map":{"version":3,"sources":["/Users/silas/Documents/GitHub/everyday_frontend/src/containers/Signup.js"],"names":["React","Form","Input","Button","Checkbox","connect","NavLink","actions","Icon","FormItem","Item","RegistrationForm","Component","state","confirmDirty","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","onAuth","userName","email","password","confirm","history","push","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","render","span","remember","required","message","offset","marginRight","mapStateToProps","isAuthenticated","auth"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Form, Input, Button,Checkbox } from 'antd';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport * as actions from '../store/action/auth';\nimport Icon from '@ant-design/icons';\n\nconst FormItem = Form.Item;\n\nclass RegistrationForm extends React.Component {\n  state = {\n    confirmDirty: false,\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        this.props.onAuth(\n            values.userName,\n            values.email,\n            values.password,\n            values.confirm\n        );\n        this.props.history.push('/');\n      }\n    });\n  }\n\n  handleConfirmBlur = (e) => {\n    const value = e.target.value;\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n  }\n\n  compareToFirstPassword = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && value !== form.getFieldValue('password')) {\n      callback('Two passwords that you enter is inconsistent!');\n    } else {\n      callback();\n    }\n  }\n\n  validateToNextPassword = (rule, value, callback) => {\n    const form = this.props.form;\n    if (value && this.state.confirmDirty) {\n      // form.validateFields(['confirm'], { force: true });\n    }\n    callback();\n  }\n\n\n  render() {\n    // const { getFieldDecorator } = this.props.form;\n\n    return (\n      <Form name=\"basic\" labelCol={{  span: 8,}} wrapperCol={{span: 16,}}initialValues={{remember: true,}}>\n\n\n      <Form.Item label=\"Username\" name=\"username\" rules={[{ required: true, message: 'Please input your username!', }, ]}>\n        <Input />\n      </Form.Item>\n\n\n      <Form.Item label=\"Email\"   name=\"eamil\" rules={[{required: true,message: 'Please input your email!', }, ]} >\n        <Input/>\n      </Form.Item>\n\n      <Form.Item label=\"Password\" name=\"password\" rules={[ {  required: true, message: 'Please input your password!', }, ]} >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item label=\"Password2\"name=\"password2\" rules={[{required: true, message: 'Please confirm your password!',}, ]}>\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item name=\"remember\" valuePropName=\"checked\" wrapperCol={{ offset: 8,  span: 16,}}>\n        <Checkbox>Remember me</Checkbox>\n      </Form.Item>\n\n      <Form.Item wrapperCol={{offset: 8, span: 16,\n        }}\n      >\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n        Or \n                    <NavLink \n                        style={{marginRight: '10px'}} \n                        to='/login/'> Login\n                    </NavLink>\n      </Form.Item>\n    </Form>\n    );\n  }\n}\n\n// // const WrappedRegistrationForm = Form.create()(RegistrationForm);\n\n// const mapStateToProps = (state) => {\n//     return {\n//         loading: state.loading,\n//         error: state.error\n//     }\n// }\n\n// const mapDispatchToProps = dispatch => {\n//     return {\n//         onAuth: (username, email, password1, password2) => dispatch(actions.authSignup(username, email, password1, password2)) \n//     }\n// }\n\nconst mapStateToProps = (state) => ({\n  isAuthenticated: state.auth?.isAuthenticated,\n});\n\nexport default connect(mapStateToProps)(RegistrationForm);\n"]},"metadata":{},"sourceType":"module"}